module RamlPoliglota
  module Code
    module Builder
      module Java

        class JavaModelBuilder

          include RamlPoliglota::Helper
          include RamlPoliglota::Helper::CodeBuilder

          def initialize
            @logger = AppLogger.create_logger self
          end

          def build(clazz)
            return if clazz.nil?

            text = ''
            _write_namespace clazz, text
            _write_documentation clazz, text
            _write_class_definition clazz, text
            _write_attributes clazz, text
            text << "\n"
            _write_getters clazz, text

            text << "\n}"
          end

          private
          def _write_namespace(clazz, target)
            return if StringHelper.empty? clazz.namespace
            target << write_code("package #{clazz.namespace};\n\n", 0)
          end

          def _write_documentation(clazz, target)
            return if StringHelper.empty? clazz.documentation
            text = []
            text << "/**"
            text << " * Generated by RAML Poliglota"
            text << " * #{clazz.documentation}"
            text << " */"

            target << write_code(text, 0)
            target << "\n\n"
          end

          def _write_class_definition(clazz, target)
            target << write_code("public class #{clazz.name} {", 0)
            target << "\n\n"
          end

          def _write_attributes(clazz, target)
            return if clazz.attributes.nil?
            clazz.attributes.each do |attribute|
              target << write_code("#{attribute.visibility} #{attribute.type} #{attribute.name};\n", 1)
            end
          end

          def _write_getters(clazz, target)
            return if clazz.attributes.nil?

            target << clazz.attributes.collect do |attribute|
              method_name = "get#{attribute.name[0].upcase}#{attribute.name[1, (attribute.name.size - 1)]}()"
              text = write_string("public #{attribute.type} #{method_name} {\n", 1)
              text << write_string("return this.#{attribute.name};\n", 2)
              text << write_string("}", 1)

              text
            end.join("\n\n")
          end

        end
      
      end
    end
  end
end