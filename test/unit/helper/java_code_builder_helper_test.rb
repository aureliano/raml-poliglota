require 'test/unit'
require File.expand_path '../../../test_helper.rb', __FILE__
require File.expand_path '../../../../lib/model/attribute_meta.rb', __FILE__
require File.expand_path '../../../../lib/model/method_meta.rb', __FILE__
require File.expand_path '../../../../lib/model/class_meta.rb', __FILE__
require File.expand_path '../../../../lib/helper/string_helper.rb', __FILE__
require File.expand_path '../../../../lib/helper/code_builder_helper.rb', __FILE__
require File.expand_path '../../../../lib/helper/java_code_builder_helper.rb', __FILE__

class JavaCodeBuilderHelperTest < Test::Unit::TestCase

  include RamlPoliglota::Helper::JavaCodeBuilder
  include RamlPoliglota::Model

  def test_write_java_attribute
    text = write_java_attribute(AttributeMeta.new do |a|
      a.visibility = 'private'
      a.type = 'Integer'
      a.name = 'id'
    end)

    assert_equal '  private Integer id;', text

    text = write_java_attribute(AttributeMeta.new do |a|
      a.visibility = 'protected'
      a.type = 'String'
      a.name = 'name'
    end)

    assert_equal '  protected String name;', text
  end

  def test_write_java_method
    text = write_java_method(MethodMeta.new do |m|
      m.visibility = 'protected'
      m.return_type = 'Integer'
      m.name = 'getId'
      m.body = 'return this.id;'
    end)

    assert_equal "  protected Integer getId() {\n    return this.id;\n  }", text

    text = write_java_method(MethodMeta.new do |m|
      m.visibility = 'public'
      m.return_type = 'void'
      m.name = 'setId'
      m.add_parameter(AttributeMeta.new do |a|
        a.type = 'Integer'
        a.name = 'id'
      end)
      m.body = 'this.id = id;'
    end)

    assert_equal "  public void setId(Integer id) {\n    this.id = id;\n  }", text

    text = write_java_method(MethodMeta.new do |m|
      m.visibility = 'public'
      m.static = true
      m.final = true
      m.return_type = 'void'
      m.name = 'doSomething'
      m.body = '// Do something'
    end)

    assert_equal "  public static final void doSomething() {\n    // Do something\n  }", text

    m = MethodMeta.new do |m|
      m.visibility = 'public'
      m.abstract = true
      m.return_type = 'void'
      m.name = 'doSomething'
      m.body = '// Do something'
    end
    text = write_java_method m
    assert_equal "  public abstract void doSomething();", text

    m.add_parameter(AttributeMeta.new do |a|
      a.type = 'Integer'
      a.name = 'param'
    end)

    text = write_java_method m
    assert_equal "  public abstract void doSomething(Integer param);", text
  end

  def test_js_to_java_type
    assert_raise(RuntimeError) { js_to_java_type nil }
    assert_raise(RuntimeError) { js_to_java_type '' }

    assert_equal 'String', js_to_java_type('string')
    assert_equal 'Double', js_to_java_type('number')
    assert_equal 'Integer', js_to_java_type('integer')
    assert_equal 'Boolean', js_to_java_type('boolean')
    assert_equal 'Object', js_to_java_type('value')
    assert_equal 'java.util.List', js_to_java_type('array')
    assert_equal 'Object', js_to_java_type('object')
    assert_equal 'FrodoBaggins', js_to_java_type('frodoBaggins')
  end

  def test_append_package
    clazz = CLASS_META_FACTORY[:model][:frodo_baggins][:object]
    target = ''

    append_package(clazz, target)
    assert_equal "package br.mg.gv;\n\n", target
  end

  def test_append_javadoc
    clazz = CLASS_META_FACTORY[:model][:frodo_baggins][:object]
    target = ''

    append_javadoc clazz, target
    assert_equal "/**\n * Generated by RAML Poliglota.\n *\n * A Java Bean class.\n */\n", target
  end

  def test_append_class_definition
    clazz = CLASS_META_FACTORY[:model][:frodo_baggins][:object]
    target = ''

    append_class_definition clazz, target
    assert_equal "public class FrodoBaggins {\n\n", target

    clazz = CLASS_META_FACTORY[:imodel][:object]
    target = ''

    append_class_definition clazz, target
    assert_equal "public interface IModel {\n\n", target
  end

  def test_append_attributes
    clazz = CLASS_META_FACTORY[:model][:frodo_baggins][:object]
    target = ''

    append_attributes clazz, target
    assert_equal "  private Integer id;\n  protected String firstName;\n  protected String lastName;\n\n", target
  end

  def test_append_methods
    clazz = CLASS_META_FACTORY[:model][:frodo_baggins][:object]
    target = ''
    expected = <<-FIN
  public Integer getId() {
    return this.id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public BilboBaggins withId(Integer id) {
    this.id = id;
    return this;
  }

  public String getFirstName() {
    return this.firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public BilboBaggins withFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public String getLastName() {
    return this.lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public BilboBaggins withLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }
FIN
    append_methods clazz, target
    assert_equal expected, target
  end

end